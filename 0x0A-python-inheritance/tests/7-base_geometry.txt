=======================================
This is the doctest to 7-base_geometry.py
=======================================

Class:
        BaseGeometry

Using ``Base``
--------------------

Import the class:

        >>> BaseGeometry  = __import__('7-base_geometry').BaseGeometry

Starting test:

    >>> bg = BaseGeometry()

    >>> bg.integer_validator("Hello", 12)

    >>> bg.integer_validator("Hello", 0)
    Traceback (most recent call last):
	...
	ValueError: Hello must be greater than 0

    >>> bg.integer_validator("Hello", -1)
    Traceback (most recent call last):
	...
	ValueError: Hello must be greater than 0

    >>> bg.integer_validator("Hello")
	Traceback (most recent call last):
	...
	TypeError: integer_validator() missing 1 required positional argument: 'value'

    >>> bg.area()
	Traceback (most recent call last):
	...
	TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

    >>> bg.integer_validator("Hello", None)
	Traceback (most recent call last):
  	...
	TypeError: age must be an integer

Mutable objects:

    >>> bg.integer_validator("width", [1, 2, 3])
    Traceback (most recent call last):
	...
	TypeError: Betty must be an integer

    >>> bg.integer_validator("width", {1, 2, 3})
    Traceback (most recent call last):
	...
	TypeError: Betty must be an integer

Immutable objects:

    >>> bg.integer_validator("width", "hola")
    Traceback (most recent call last):
	...
	TypeError: Betty must be an integer

    >>> bg.integer_validator("width", 41.0)
    Traceback (most recent call last):
	...
	TypeError: Betty must be an integer

    >>> bg.integer_validator("width",(float"inf")
    Traceback (most recent call last):
	...
	TypeError: Betty must be an integer

    TypeError: age must be an integer
    >>> bg.integer_validator("Hello", True)
    Traceback (most recent call last):
